=begin
#DEAR Inventory API

#This specifing endpoints for DEAR Inventory API

The version of the OpenAPI document: 2.0.0
Contact: nnhansg@gmail.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'date'

module DearInventoryRuby
  class Contact
    # If passed in PUT method, entry will be searched by id, found entry will be updated, otherwise created
    attr_accessor :id

    # Name of Contact
    attr_accessor :name

    # Job Title
    attr_accessor :job_title

    # Phone
    attr_accessor :phone

    # Mobile Phone
    attr_accessor :mobile_phone

    # Fax
    attr_accessor :fax

    # Email
    attr_accessor :email

    # Website
    attr_accessor :website

    # Comment
    attr_accessor :comment

    # Points that Contact is used as default. `false` as default.
    attr_accessor :default

    # Points that Contact is included in Email. `false` as default.
    attr_accessor :include_in_email

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'ID',
        :'name' => :'Name',
        :'job_title' => :'JobTitle',
        :'phone' => :'Phone',
        :'mobile_phone' => :'MobilePhone',
        :'fax' => :'Fax',
        :'email' => :'Email',
        :'website' => :'Website',
        :'comment' => :'Comment',
        :'default' => :'Default',
        :'include_in_email' => :'IncludeInEmail'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'name' => :'String',
        :'job_title' => :'String',
        :'phone' => :'String',
        :'mobile_phone' => :'String',
        :'fax' => :'String',
        :'email' => :'String',
        :'website' => :'String',
        :'comment' => :'String',
        :'default' => :'Boolean',
        :'include_in_email' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DearInventoryRuby::Contact` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `DearInventoryRuby::Contact`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'job_title')
        self.job_title = attributes[:'job_title']
      end

      if attributes.key?(:'phone')
        self.phone = attributes[:'phone']
      end

      if attributes.key?(:'mobile_phone')
        self.mobile_phone = attributes[:'mobile_phone']
      end

      if attributes.key?(:'fax')
        self.fax = attributes[:'fax']
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'website')
        self.website = attributes[:'website']
      end

      if attributes.key?(:'comment')
        self.comment = attributes[:'comment']
      end

      if attributes.key?(:'default')
        self.default = attributes[:'default']
      else
        self.default = false
      end

      if attributes.key?(:'include_in_email')
        self.include_in_email = attributes[:'include_in_email']
      else
        self.include_in_email = false
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @name.to_s.length > 256
        invalid_properties.push('invalid value for "name", the character length must be smaller than or equal to 256.')
      end

      if !@phone.nil? && @phone.to_s.length > 50
        invalid_properties.push('invalid value for "phone", the character length must be smaller than or equal to 50.')
      end

      if !@fax.nil? && @fax.to_s.length > 50
        invalid_properties.push('invalid value for "fax", the character length must be smaller than or equal to 50.')
      end

      if !@email.nil? && @email.to_s.length > 256
        invalid_properties.push('invalid value for "email", the character length must be smaller than or equal to 256.')
      end

      if !@website.nil? && @website.to_s.length > 256
        invalid_properties.push('invalid value for "website", the character length must be smaller than or equal to 256.')
      end

      if !@comment.nil? && @comment.to_s.length > 256
        invalid_properties.push('invalid value for "comment", the character length must be smaller than or equal to 256.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @name.nil?
      return false if @name.to_s.length > 256
      return false if !@phone.nil? && @phone.to_s.length > 50
      return false if !@fax.nil? && @fax.to_s.length > 50
      return false if !@email.nil? && @email.to_s.length > 256
      return false if !@website.nil? && @website.to_s.length > 256
      return false if !@comment.nil? && @comment.to_s.length > 256
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, 'name cannot be nil'
      end

      if name.to_s.length > 256
        fail ArgumentError, 'invalid value for "name", the character length must be smaller than or equal to 256.'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] phone Value to be assigned
    def phone=(phone)
      if !phone.nil? && phone.to_s.length > 50
        fail ArgumentError, 'invalid value for "phone", the character length must be smaller than or equal to 50.'
      end

      @phone = phone
    end

    # Custom attribute writer method with validation
    # @param [Object] fax Value to be assigned
    def fax=(fax)
      if !fax.nil? && fax.to_s.length > 50
        fail ArgumentError, 'invalid value for "fax", the character length must be smaller than or equal to 50.'
      end

      @fax = fax
    end

    # Custom attribute writer method with validation
    # @param [Object] email Value to be assigned
    def email=(email)
      if !email.nil? && email.to_s.length > 256
        fail ArgumentError, 'invalid value for "email", the character length must be smaller than or equal to 256.'
      end

      @email = email
    end

    # Custom attribute writer method with validation
    # @param [Object] website Value to be assigned
    def website=(website)
      if !website.nil? && website.to_s.length > 256
        fail ArgumentError, 'invalid value for "website", the character length must be smaller than or equal to 256.'
      end

      @website = website
    end

    # Custom attribute writer method with validation
    # @param [Object] comment Value to be assigned
    def comment=(comment)
      if !comment.nil? && comment.to_s.length > 256
        fail ArgumentError, 'invalid value for "comment", the character length must be smaller than or equal to 256.'
      end

      @comment = comment
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          name == o.name &&
          job_title == o.job_title &&
          phone == o.phone &&
          mobile_phone == o.mobile_phone &&
          fax == o.fax &&
          email == o.email &&
          website == o.website &&
          comment == o.comment &&
          default == o.default &&
          include_in_email == o.include_in_email
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, name, job_title, phone, mobile_phone, fax, email, website, comment, default, include_in_email].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        DearInventoryRuby.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
