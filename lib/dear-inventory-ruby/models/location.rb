=begin
#DEAR Inventory API

#This specifing endpoints for DEAR Inventory API

The version of the OpenAPI document: 2.0.0
Contact: nnhansg@gmail.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'date'

module DearInventoryRuby
  class Location
    # Required for `PUT` and `DELETE`, Ignored for `POST` operations
    attr_accessor :id

    # Location name
    attr_accessor :name

    # Points that location is used as default
    attr_accessor :is_default

    # Points that location is deprecated
    attr_accessor :deprecated

    # Array (ID, Name) with related Bins
    attr_accessor :bins

    # Points that location is used as Fixed Asset
    attr_accessor :fixed_assets_location

    # Parent ID (used for Bins)
    attr_accessor :parent_id

    # Reference linked to current location
    attr_accessor :reference_count

    # Address line
    attr_accessor :address_line1

    # Address line second
    attr_accessor :address_line2

    # City suburb
    attr_accessor :address_city_suburb

    # State province
    attr_accessor :address_state_province

    # Zip post code
    attr_accessor :address_zip_post_code

    # Country
    attr_accessor :address_country

    # Pick zones
    attr_accessor :pick_zones

    # Points that location is shopfloor
    attr_accessor :is_shopfloor

    # Points that location is location of co-manufacturer
    attr_accessor :is_co_man

    # Points that location is staging. It is used only for Bins
    attr_accessor :is_staging

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'ID',
        :'name' => :'Name',
        :'is_default' => :'IsDefault',
        :'deprecated' => :'Deprecated',
        :'bins' => :'Bins',
        :'fixed_assets_location' => :'FixedAssetsLocation',
        :'parent_id' => :'ParentID',
        :'reference_count' => :'ReferenceCount',
        :'address_line1' => :'AddressLine1',
        :'address_line2' => :'AddressLine2',
        :'address_city_suburb' => :'AddressCitySuburb',
        :'address_state_province' => :'AddressStateProvince',
        :'address_zip_post_code' => :'AddressZipPostCode',
        :'address_country' => :'AddressCountry',
        :'pick_zones' => :'PickZones',
        :'is_shopfloor' => :'IsShopfloor',
        :'is_co_man' => :'IsCoMan',
        :'is_staging' => :'IsStaging'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'name' => :'String',
        :'is_default' => :'Boolean',
        :'deprecated' => :'Boolean',
        :'bins' => :'Array<Bin>',
        :'fixed_assets_location' => :'Boolean',
        :'parent_id' => :'String',
        :'reference_count' => :'Integer',
        :'address_line1' => :'String',
        :'address_line2' => :'String',
        :'address_city_suburb' => :'String',
        :'address_state_province' => :'String',
        :'address_zip_post_code' => :'String',
        :'address_country' => :'String',
        :'pick_zones' => :'String',
        :'is_shopfloor' => :'Boolean',
        :'is_co_man' => :'Boolean',
        :'is_staging' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DearInventoryRuby::Location` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `DearInventoryRuby::Location`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'is_default')
        self.is_default = attributes[:'is_default']
      else
        self.is_default = false
      end

      if attributes.key?(:'deprecated')
        self.deprecated = attributes[:'deprecated']
      else
        self.deprecated = false
      end

      if attributes.key?(:'bins')
        if (value = attributes[:'bins']).is_a?(Array)
          self.bins = value
        end
      end

      if attributes.key?(:'fixed_assets_location')
        self.fixed_assets_location = attributes[:'fixed_assets_location']
      else
        self.fixed_assets_location = false
      end

      if attributes.key?(:'parent_id')
        self.parent_id = attributes[:'parent_id']
      end

      if attributes.key?(:'reference_count')
        self.reference_count = attributes[:'reference_count']
      end

      if attributes.key?(:'address_line1')
        self.address_line1 = attributes[:'address_line1']
      end

      if attributes.key?(:'address_line2')
        self.address_line2 = attributes[:'address_line2']
      end

      if attributes.key?(:'address_city_suburb')
        self.address_city_suburb = attributes[:'address_city_suburb']
      end

      if attributes.key?(:'address_state_province')
        self.address_state_province = attributes[:'address_state_province']
      end

      if attributes.key?(:'address_zip_post_code')
        self.address_zip_post_code = attributes[:'address_zip_post_code']
      end

      if attributes.key?(:'address_country')
        self.address_country = attributes[:'address_country']
      end

      if attributes.key?(:'pick_zones')
        self.pick_zones = attributes[:'pick_zones']
      end

      if attributes.key?(:'is_shopfloor')
        self.is_shopfloor = attributes[:'is_shopfloor']
      else
        self.is_shopfloor = false
      end

      if attributes.key?(:'is_co_man')
        self.is_co_man = attributes[:'is_co_man']
      else
        self.is_co_man = false
      end

      if attributes.key?(:'is_staging')
        self.is_staging = attributes[:'is_staging']
      else
        self.is_staging = false
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          name == o.name &&
          is_default == o.is_default &&
          deprecated == o.deprecated &&
          bins == o.bins &&
          fixed_assets_location == o.fixed_assets_location &&
          parent_id == o.parent_id &&
          reference_count == o.reference_count &&
          address_line1 == o.address_line1 &&
          address_line2 == o.address_line2 &&
          address_city_suburb == o.address_city_suburb &&
          address_state_province == o.address_state_province &&
          address_zip_post_code == o.address_zip_post_code &&
          address_country == o.address_country &&
          pick_zones == o.pick_zones &&
          is_shopfloor == o.is_shopfloor &&
          is_co_man == o.is_co_man &&
          is_staging == o.is_staging
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, name, is_default, deprecated, bins, fixed_assets_location, parent_id, reference_count, address_line1, address_line2, address_city_suburb, address_state_province, address_zip_post_code, address_country, pick_zones, is_shopfloor, is_co_man, is_staging].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        DearInventoryRuby.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
