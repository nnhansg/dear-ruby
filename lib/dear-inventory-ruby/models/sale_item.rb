=begin
#DEAR Inventory API

#This specifing endpoints for DEAR Inventory API

The version of the OpenAPI document: 2.0.0
Contact: nnhansg@gmail.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'date'

module DearInventoryRuby
  class SaleItem
    # Unique DEAR Sale identifier
    attr_accessor :sale_id

    # Sale Order number generated by DEAR
    attr_accessor :order_number

    # Current sale status. Possible values are values
    attr_accessor :status

    # Date when Sale Order was created
    attr_accessor :order_date

    # Date when Invoice was issued
    attr_accessor :invoice_date

    # Name of the customer
    attr_accessor :customer

    # Customer Identifier
    attr_accessor :customer_id

    # Invoice number generated by DEAR
    attr_accessor :invoice_number

    # Optional Customer Reference (typically customer Purchase order number) supplied by the customer for the sale
    attr_accessor :customer_reference

    # Total Invoice amount minus total Credit note amount in customer currency
    attr_accessor :invoice_amount

    # Total Paid amount minus Refunded amount in customer currency
    attr_accessor :paid_amount

    # Date when invoice is due according to selected payment terms
    attr_accessor :invoice_due_date

    # Date when shipment is due
    attr_accessor :ship_by

    # 3 digit Base currency code (as configured in General Settings)
    attr_accessor :base_currency

    # 3 digit Customer currency code
    attr_accessor :customer_currency

    # Credit note number generated by DEAR. Is empty unless credit note is created
    attr_accessor :credit_note_number

    # Date when the sale was last created/updated last time
    attr_accessor :updated

    # Sale Quote status. Possible Values are values
    attr_accessor :quote_status

    # Sale Order status. Possible Values are values
    attr_accessor :order_status

    # Pick status. Possible Values are VOIDED, NOT AVAILABLE, PICKED, PICKING , NOT PICKED , PARTIALLY PICKED
    attr_accessor :combined_picking_status

    # Pack status. Possible Values are VOIDED, NOT AVAILABLE, PACKED, PACKING, NOT PACKED, PARTIALLY PACKED
    attr_accessor :combined_packing_status

    # Ship status. Possible Values are VOIDED, NOT AVAILABLE, SHIPPED, SHIPPING , NOT SHIPPED , PARTIALLY SHIPPED
    attr_accessor :combined_shipping_status

    # Fulfilment status. Possible Values are FULFILLED, PARTIALLY FULFILLED, NOT AVAILABLE, NOT FULFILLED, VOIDED
    attr_accessor :ful_filment_status

    # Invoice status. Possible Values are VOIDED, DRAFT, AUTHORISED, NOT AVAILABLE, PAID
    attr_accessor :combined_invoice_status

    # Credit Note status. Possible Values are VOIDED, DRAFT, AUTHORISED, NOT AVAILABLE
    attr_accessor :credit_note_status

    # Payment status. Possible Values are NOT REFUNDED, PREPAID, PARTIALLY PAID, UNPAID, PAID, VOIDED
    attr_accessor :combined_payment_status

    # Type of Sale. Possible Values are Simple Sale, Advanced Sale , Service Sale
    attr_accessor :type

    # Tracking Numbers
    attr_accessor :combined_tracking_numbers

    # Source of the sale. read-only field
    attr_accessor :source_channel

    # Custom field that is only available in API and allows to set arbitrary value for the sale for later search and any custom logic
    attr_accessor :external_id

    # Sale Order Location ID
    attr_accessor :order_location_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'sale_id' => :'SaleID',
        :'order_number' => :'OrderNumber',
        :'status' => :'Status',
        :'order_date' => :'OrderDate',
        :'invoice_date' => :'InvoiceDate',
        :'customer' => :'Customer',
        :'customer_id' => :'CustomerID',
        :'invoice_number' => :'InvoiceNumber',
        :'customer_reference' => :'CustomerReference',
        :'invoice_amount' => :'InvoiceAmount',
        :'paid_amount' => :'PaidAmount',
        :'invoice_due_date' => :'InvoiceDueDate',
        :'ship_by' => :'ShipBy',
        :'base_currency' => :'BaseCurrency',
        :'customer_currency' => :'CustomerCurrency',
        :'credit_note_number' => :'CreditNoteNumber',
        :'updated' => :'Updated',
        :'quote_status' => :'QuoteStatus',
        :'order_status' => :'OrderStatus',
        :'combined_picking_status' => :'CombinedPickingStatus',
        :'combined_packing_status' => :'CombinedPackingStatus',
        :'combined_shipping_status' => :'CombinedShippingStatus',
        :'ful_filment_status' => :'FulFilmentStatus',
        :'combined_invoice_status' => :'CombinedInvoiceStatus',
        :'credit_note_status' => :'CreditNoteStatus',
        :'combined_payment_status' => :'CombinedPaymentStatus',
        :'type' => :'Type',
        :'combined_tracking_numbers' => :'CombinedTrackingNumbers',
        :'source_channel' => :'SourceChannel',
        :'external_id' => :'ExternalID',
        :'order_location_id' => :'OrderLocationID'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'sale_id' => :'String',
        :'order_number' => :'String',
        :'status' => :'String',
        :'order_date' => :'Date',
        :'invoice_date' => :'Date',
        :'customer' => :'String',
        :'customer_id' => :'String',
        :'invoice_number' => :'String',
        :'customer_reference' => :'String',
        :'invoice_amount' => :'Float',
        :'paid_amount' => :'Float',
        :'invoice_due_date' => :'Date',
        :'ship_by' => :'Date',
        :'base_currency' => :'String',
        :'customer_currency' => :'String',
        :'credit_note_number' => :'String',
        :'updated' => :'Date',
        :'quote_status' => :'String',
        :'order_status' => :'String',
        :'combined_picking_status' => :'String',
        :'combined_packing_status' => :'String',
        :'combined_shipping_status' => :'String',
        :'ful_filment_status' => :'String',
        :'combined_invoice_status' => :'String',
        :'credit_note_status' => :'String',
        :'combined_payment_status' => :'String',
        :'type' => :'String',
        :'combined_tracking_numbers' => :'String',
        :'source_channel' => :'String',
        :'external_id' => :'String',
        :'order_location_id' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DearInventoryRuby::SaleItem` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `DearInventoryRuby::SaleItem`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'sale_id')
        self.sale_id = attributes[:'sale_id']
      end

      if attributes.key?(:'order_number')
        self.order_number = attributes[:'order_number']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'order_date')
        self.order_date = attributes[:'order_date']
      end

      if attributes.key?(:'invoice_date')
        self.invoice_date = attributes[:'invoice_date']
      end

      if attributes.key?(:'customer')
        self.customer = attributes[:'customer']
      end

      if attributes.key?(:'customer_id')
        self.customer_id = attributes[:'customer_id']
      end

      if attributes.key?(:'invoice_number')
        self.invoice_number = attributes[:'invoice_number']
      end

      if attributes.key?(:'customer_reference')
        self.customer_reference = attributes[:'customer_reference']
      end

      if attributes.key?(:'invoice_amount')
        self.invoice_amount = attributes[:'invoice_amount']
      end

      if attributes.key?(:'paid_amount')
        self.paid_amount = attributes[:'paid_amount']
      end

      if attributes.key?(:'invoice_due_date')
        self.invoice_due_date = attributes[:'invoice_due_date']
      end

      if attributes.key?(:'ship_by')
        self.ship_by = attributes[:'ship_by']
      end

      if attributes.key?(:'base_currency')
        self.base_currency = attributes[:'base_currency']
      end

      if attributes.key?(:'customer_currency')
        self.customer_currency = attributes[:'customer_currency']
      end

      if attributes.key?(:'credit_note_number')
        self.credit_note_number = attributes[:'credit_note_number']
      end

      if attributes.key?(:'updated')
        self.updated = attributes[:'updated']
      end

      if attributes.key?(:'quote_status')
        self.quote_status = attributes[:'quote_status']
      end

      if attributes.key?(:'order_status')
        self.order_status = attributes[:'order_status']
      end

      if attributes.key?(:'combined_picking_status')
        self.combined_picking_status = attributes[:'combined_picking_status']
      end

      if attributes.key?(:'combined_packing_status')
        self.combined_packing_status = attributes[:'combined_packing_status']
      end

      if attributes.key?(:'combined_shipping_status')
        self.combined_shipping_status = attributes[:'combined_shipping_status']
      end

      if attributes.key?(:'ful_filment_status')
        self.ful_filment_status = attributes[:'ful_filment_status']
      end

      if attributes.key?(:'combined_invoice_status')
        self.combined_invoice_status = attributes[:'combined_invoice_status']
      end

      if attributes.key?(:'credit_note_status')
        self.credit_note_status = attributes[:'credit_note_status']
      end

      if attributes.key?(:'combined_payment_status')
        self.combined_payment_status = attributes[:'combined_payment_status']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'combined_tracking_numbers')
        self.combined_tracking_numbers = attributes[:'combined_tracking_numbers']
      end

      if attributes.key?(:'source_channel')
        self.source_channel = attributes[:'source_channel']
      end

      if attributes.key?(:'external_id')
        self.external_id = attributes[:'external_id']
      end

      if attributes.key?(:'order_location_id')
        self.order_location_id = attributes[:'order_location_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          sale_id == o.sale_id &&
          order_number == o.order_number &&
          status == o.status &&
          order_date == o.order_date &&
          invoice_date == o.invoice_date &&
          customer == o.customer &&
          customer_id == o.customer_id &&
          invoice_number == o.invoice_number &&
          customer_reference == o.customer_reference &&
          invoice_amount == o.invoice_amount &&
          paid_amount == o.paid_amount &&
          invoice_due_date == o.invoice_due_date &&
          ship_by == o.ship_by &&
          base_currency == o.base_currency &&
          customer_currency == o.customer_currency &&
          credit_note_number == o.credit_note_number &&
          updated == o.updated &&
          quote_status == o.quote_status &&
          order_status == o.order_status &&
          combined_picking_status == o.combined_picking_status &&
          combined_packing_status == o.combined_packing_status &&
          combined_shipping_status == o.combined_shipping_status &&
          ful_filment_status == o.ful_filment_status &&
          combined_invoice_status == o.combined_invoice_status &&
          credit_note_status == o.credit_note_status &&
          combined_payment_status == o.combined_payment_status &&
          type == o.type &&
          combined_tracking_numbers == o.combined_tracking_numbers &&
          source_channel == o.source_channel &&
          external_id == o.external_id &&
          order_location_id == o.order_location_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [sale_id, order_number, status, order_date, invoice_date, customer, customer_id, invoice_number, customer_reference, invoice_amount, paid_amount, invoice_due_date, ship_by, base_currency, customer_currency, credit_note_number, updated, quote_status, order_status, combined_picking_status, combined_packing_status, combined_shipping_status, ful_filment_status, combined_invoice_status, credit_note_status, combined_payment_status, type, combined_tracking_numbers, source_channel, external_id, order_location_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        DearInventoryRuby.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
