=begin
#DEAR Inventory API

#This specifing endpoints for DEAR Inventory API

The version of the OpenAPI document: 2.0.0
Contact: nnhansg@gmail.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'date'

module DearInventoryRuby
  class SaleInvoicePartial
    # Identifier of sale Invoice task
    attr_accessor :task_id

    # If `true` then `additional charges` lines displayed in `Lines` array
    attr_accessor :combine_additional_charges

    # Invoice Number (auto-generated)
    attr_accessor :invoice_number

    # Additional information for Invoice.
    attr_accessor :memo

    # Invoice status. Possible Values are values. For POST available values are DRAFT, AUTHORISED
    attr_accessor :status

    # Invoice Date.
    attr_accessor :invoice_date

    # Invoice Due Date.
    attr_accessor :invoice_due_date

    # Decimal with up to 4 decimal places
    attr_accessor :currency_conversion_rate

    # Billing Address Line 1
    attr_accessor :billing_address_line1

    # Billing Address Line 2
    attr_accessor :billing_address_line2

    # Number of Fulfilment linked to this invoice
    attr_accessor :linked_fulfillment_number

    attr_accessor :lines

    attr_accessor :additional_charges

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'task_id' => :'TaskID',
        :'combine_additional_charges' => :'CombineAdditionalCharges',
        :'invoice_number' => :'InvoiceNumber',
        :'memo' => :'Memo',
        :'status' => :'Status',
        :'invoice_date' => :'InvoiceDate',
        :'invoice_due_date' => :'InvoiceDueDate',
        :'currency_conversion_rate' => :'CurrencyConversionRate',
        :'billing_address_line1' => :'BillingAddressLine1',
        :'billing_address_line2' => :'BillingAddressLine2',
        :'linked_fulfillment_number' => :'LinkedFulfillmentNumber',
        :'lines' => :'Lines',
        :'additional_charges' => :'AdditionalCharges'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'task_id' => :'String',
        :'combine_additional_charges' => :'Boolean',
        :'invoice_number' => :'String',
        :'memo' => :'String',
        :'status' => :'String',
        :'invoice_date' => :'String',
        :'invoice_due_date' => :'String',
        :'currency_conversion_rate' => :'Float',
        :'billing_address_line1' => :'String',
        :'billing_address_line2' => :'String',
        :'linked_fulfillment_number' => :'Integer',
        :'lines' => :'Array<SaleInvoiceLine>',
        :'additional_charges' => :'Array<SaleInvoiceAdditionalCharge>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DearInventoryRuby::SaleInvoicePartial` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `DearInventoryRuby::SaleInvoicePartial`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'task_id')
        self.task_id = attributes[:'task_id']
      end

      if attributes.key?(:'combine_additional_charges')
        self.combine_additional_charges = attributes[:'combine_additional_charges']
      else
        self.combine_additional_charges = false
      end

      if attributes.key?(:'invoice_number')
        self.invoice_number = attributes[:'invoice_number']
      end

      if attributes.key?(:'memo')
        self.memo = attributes[:'memo']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'invoice_date')
        self.invoice_date = attributes[:'invoice_date']
      end

      if attributes.key?(:'invoice_due_date')
        self.invoice_due_date = attributes[:'invoice_due_date']
      end

      if attributes.key?(:'currency_conversion_rate')
        self.currency_conversion_rate = attributes[:'currency_conversion_rate']
      end

      if attributes.key?(:'billing_address_line1')
        self.billing_address_line1 = attributes[:'billing_address_line1']
      end

      if attributes.key?(:'billing_address_line2')
        self.billing_address_line2 = attributes[:'billing_address_line2']
      end

      if attributes.key?(:'linked_fulfillment_number')
        self.linked_fulfillment_number = attributes[:'linked_fulfillment_number']
      end

      if attributes.key?(:'lines')
        if (value = attributes[:'lines']).is_a?(Array)
          self.lines = value
        end
      end

      if attributes.key?(:'additional_charges')
        if (value = attributes[:'additional_charges']).is_a?(Array)
          self.additional_charges = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @task_id.nil?
        invalid_properties.push('invalid value for "task_id", task_id cannot be nil.')
      end

      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      if @invoice_date.nil?
        invalid_properties.push('invalid value for "invoice_date", invoice_date cannot be nil.')
      end

      if @invoice_due_date.nil?
        invalid_properties.push('invalid value for "invoice_due_date", invoice_due_date cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @task_id.nil?
      return false if @status.nil?
      return false if @invoice_date.nil?
      return false if @invoice_due_date.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          task_id == o.task_id &&
          combine_additional_charges == o.combine_additional_charges &&
          invoice_number == o.invoice_number &&
          memo == o.memo &&
          status == o.status &&
          invoice_date == o.invoice_date &&
          invoice_due_date == o.invoice_due_date &&
          currency_conversion_rate == o.currency_conversion_rate &&
          billing_address_line1 == o.billing_address_line1 &&
          billing_address_line2 == o.billing_address_line2 &&
          linked_fulfillment_number == o.linked_fulfillment_number &&
          lines == o.lines &&
          additional_charges == o.additional_charges
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [task_id, combine_additional_charges, invoice_number, memo, status, invoice_date, invoice_due_date, currency_conversion_rate, billing_address_line1, billing_address_line2, linked_fulfillment_number, lines, additional_charges].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        DearInventoryRuby.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
